//
//  SearchCriteriaViewControllerTests.swift
//  iTunesApp
//
//  Created by Vineet Sansare on 21/12/2021.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import iTunesApp
import Quick
import Nimble

class SearchCriteriaViewControllerTests: QuickSpec {
    
    override func spec() {
        describe("SearchCriteriaViewController Tests") {
            // MARK: Subject under test
            var sut: SearchCriteriaViewController!
            var window: UIWindow!
            var searchCriteriaBusinessLogicSpy: SearchCriteriaBusinessLogicSpy!
            
            // MARK: Test setup
            func setupSearchCriteriaViewController() {
                sut = SearchCriteriaViewController()
            }
            
            beforeEach {
                window = UIWindow(frame: UIScreen.main.bounds)
                setupSearchCriteriaViewController()
            }
            
            afterEach {
                window = nil
            }
            
            func loadview() {
                window.addSubview(sut.view)
                sut.beginAppearanceTransition(true, animated: false)
                sut.endAppearanceTransition()
            }
            
            // MARK: Test doubles
            class SearchCriteriaBusinessLogicSpy: SearchCriteriaBusinessLogic {
                var searchItunesCalled = false
                var informMediaTypeSelectorCalled = false
                
                func searchItunes(request: SearchCriteria.Entity.Request) {
                    searchItunesCalled = true
                }
                func informMediaTypeSelector(request: SearchCriteria.Entity.Request) {
                    informMediaTypeSelectorCalled = true
                }
            }
            
            //MARK: - Test
            context("When view is loaded") {
                it("should be a SearchCriteriaViewController") {
                    expect(sut).to(beAKindOf(SearchCriteriaViewController.self))
                }
            }

            context("when submit button is tapped") {
                beforeEach {
                    loadview()
                    searchCriteriaBusinessLogicSpy = SearchCriteriaBusinessLogicSpy()
                    sut.interactor = searchCriteriaBusinessLogicSpy
                    sut.submitButtonTapped(UIButton())
                }
                it("should call searchItunes on interactor") {
                    expect(searchCriteriaBusinessLogicSpy.searchItunesCalled).to(beTrue())
                }
            }
            
            context("when mediaTypeView is tapped") {
                beforeEach {
                    loadview()
                    searchCriteriaBusinessLogicSpy = SearchCriteriaBusinessLogicSpy()
                    sut.interactor = searchCriteriaBusinessLogicSpy
                    sut.mediaTypeViewTapped(UITapGestureRecognizer())
                }
                it("should call informMediaTypeSelector on interactor") {
                    expect(searchCriteriaBusinessLogicSpy.informMediaTypeSelectorCalled).to(beTrue())
                }
            }
        }
    }
}
