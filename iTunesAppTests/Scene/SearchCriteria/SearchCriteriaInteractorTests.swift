//
//  SearchCriteriaInteractorTests.swift
//  iTunesApp
//
//  Created by Vineet Sansare on 21/12/2021.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import iTunesApp
import Quick
import Nimble

class SearchCriteriaInteractorTests: QuickSpec {
    
    override func spec() {
        describe("SearchCriteriaInteractor tests") {
            // MARK: Subject under test
            var sut: SearchCriteriaInteractor!
            var searchCriteriaPresentationLogicSpy: SearchCriteriaPresentationLogicSpy!
            
            beforeEach {
                setupLaunchesInteractor()
            }
            
            // MARK: Test setup
            func setupLaunchesInteractor() {
                sut = SearchCriteriaInteractor()
            }
            
            // MARK: Test doubles
            class SearchCriteriaPresentationLogicSpy: SearchCriteriaPresentationLogic {
                var presentResultScreenCalled = false
                var presentErrorCalled = false
                var presentMediaTypeSelectorCalled = false
                var searchResults: SearchResult?
                
                func presentResultScreenWith(response: SearchCriteria.Entity.Response) {
                    presentResultScreenCalled = true
                }
                func presentError(message: String) {
                    presentErrorCalled = true
                }
                
                func presentMediaTypeSelector(response: SearchCriteria.SelectedEntity.Response) {
                    presentMediaTypeSelectorCalled = true
                }
            }
            
            // MARK: Tests
            context("when searchItunes func is called without serachTerm") {
                beforeEach {
                    setupLaunchesInteractor()
                    let searchResults = SearchResult.stub()
                    searchCriteriaPresentationLogicSpy = SearchCriteriaPresentationLogicSpy()
                    searchCriteriaPresentationLogicSpy.searchResults = searchResults
                    if let media = searchResults?.results {
                        sut.mediaObjects = [media]
                    }
                    sut.presenter = searchCriteriaPresentationLogicSpy
                    let request = SearchCriteria.Entity.Request(term: "",
                                                                entities: ["Album","Artist","Book","Movie","Music Video","Podcast","Song"])
                    sut.searchItunes(request: request)
                }
                it("sould call presentErrorCalled") {
                    expect(searchCriteriaPresentationLogicSpy.presentErrorCalled).to(beTrue())
                    expect(searchCriteriaPresentationLogicSpy.searchResults).to(beNil())
                }
            }
            
            context("when searchItunes func is called without entities") {
                beforeEach {
                    setupLaunchesInteractor()
                    let searchResults = SearchResult.stub()
                    searchCriteriaPresentationLogicSpy = SearchCriteriaPresentationLogicSpy()
                    searchCriteriaPresentationLogicSpy.searchResults = searchResults
                    if let media = searchResults?.results {
                        sut.mediaObjects = [media]
                    }
                    sut.presenter = searchCriteriaPresentationLogicSpy
                    let request = SearchCriteria.Entity.Request(term: "fast and furious",
                                                                entities: [])
                    sut.searchItunes(request: request)
                }
                it("sould call presentErrorCalled") {
                    expect(searchCriteriaPresentationLogicSpy.presentErrorCalled).to(beTrue())
                    expect(searchCriteriaPresentationLogicSpy.searchResults).to(beNil())
                }
            }
            
            context("when searchItunes func is called with serachTerm and entities") {
                beforeEach {
                    setupLaunchesInteractor()
                    let searchResults = SearchResult.stub()
                    searchCriteriaPresentationLogicSpy = SearchCriteriaPresentationLogicSpy()
                    searchCriteriaPresentationLogicSpy.searchResults = searchResults
                    if let media = searchResults?.results {
                        sut.mediaObjects = [media]
                    }
                    sut.presenter = searchCriteriaPresentationLogicSpy
                    SearchMediaNetworkInjector.networkManager = MediaServiceMock()
                    
                    let request = SearchCriteria.Entity.Request(term: "fast and furious",
                                                                entities: ["Album","Artist","Book","Movie","Music Video","Podcast","Song"])
                    sut.searchItunes(request: request)
                }
                it("sould call the search function") {
                    expect(searchCriteriaPresentationLogicSpy.presentResultScreenCalled).toEventually(beTrue())
                    expect(searchCriteriaPresentationLogicSpy.searchResults).toNot(beNil())
                }
            }
        }
    }
}
