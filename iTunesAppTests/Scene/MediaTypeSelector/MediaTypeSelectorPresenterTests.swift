//
//  MediaTypeSelectorPresenterTests.swift
//  iTunesApp
//
//  Created by Vineet Sansare on 22/12/2021.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import iTunesApp
import Quick
import Nimble

class MediaTypeSelectorPresenterTests: QuickSpec {
    
    override func spec() {
        describe("MediaTypeSelectorPresenterTests tests") {
            
            // MARK: Subject under test
            var sut: MediaTypeSelectorPresenter!
            var spy: MediaTypePresenterSpy!
            
            beforeSuite {
                setupLaunchesPresenter()
            }
            
            // MARK: Test setup
            func setupLaunchesPresenter() {
                sut = MediaTypeSelectorPresenter()
            }
            
            // MARK: Test doubles
            class MediaTypePresenterSpy: MediaTypeSelectorDisplayLogic {
                var displaySelectedMediaTypesCalled = false
                var updateUserSelectedMediaTypesCalled = false
                
                func displaySelectedMediaTypes(viewModel: MediaTypeSelector.MediaType.ViewModel) {
                    displaySelectedMediaTypesCalled = true
                }
                
                func updateUserSelectedMediaTypes(viewModel: MediaTypeSelector.MediaType.ViewModel) {
                    updateUserSelectedMediaTypesCalled = true
                }
            }
            
            // MARK: Tests
            context("when view is loaded") {
                beforeEach {
                    spy = MediaTypePresenterSpy()
                    sut.viewController = spy
                    let response = MediaTypeSelector.MediaType.Response(mediaTypes: ["Album","Artist","Book","Movie","Music Video","Podcast","Song"])
                    sut.presentUpdatedMediaTypes(response: response)
                }
                it("should display updated mediaTypes") {
                    expect(spy.displaySelectedMediaTypesCalled).to(beTrue())
                }
            }
            context("when done button is tapped") {
                beforeEach {
                    spy = MediaTypePresenterSpy()
                    sut.viewController = spy
                    let response = MediaTypeSelector.MediaType.Response(mediaTypes: ["Album","Artist","Book","Movie","Music Video","Podcast","Song"])
                    sut.presentSearchCriteria(response: response)
                }
                it("should update user selected mediaTypes to send to server") {
                    expect(spy.updateUserSelectedMediaTypesCalled).to(beTrue())
                }
            }
        }
    }
}
