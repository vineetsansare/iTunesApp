//
//  MediaTypeSelectorInteractorTests.swift
//  iTunesApp
//
//  Created by Vineet Sansare on 22/12/2021.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import iTunesApp
import Quick
import Nimble

class MediaTypeSelectorInteractorTests: QuickSpec {
    override func spec() {
        describe("MediaTypeSelectorInteractor tests") {
            // MARK: Subject under test
            var sut: MediaTypeSelectorInteractor!
            var mediaTypeSelectorPresentationLogicSpy: MediaTypeSelectorPresentationLogicSpy!
            
            beforeEach {
                setupLaunchesInteractor()
            }
            
            // MARK: Test setup
            func setupLaunchesInteractor() {
                sut = MediaTypeSelectorInteractor()
            }
            
            // MARK: Test doubles
            class MediaTypeSelectorPresentationLogicSpy: MediaTypeSelectorPresentationLogic {
                var presentSearchCriteriaCalled = false
                var presentUpdatedMediaTypesCalled = false
                
                func presentSearchCriteria(response: MediaTypeSelector.MediaType.Response) {
                    presentSearchCriteriaCalled = true
                }
                
                func presentUpdatedMediaTypes(response: MediaTypeSelector.MediaType.Response) {
                    presentUpdatedMediaTypesCalled = true
                }
            }
            
            // MARK: Tests
            context("when updateWithSelectedMedia is called on interactor") {
                beforeEach {
                    setupLaunchesInteractor()
                    mediaTypeSelectorPresentationLogicSpy = MediaTypeSelectorPresentationLogicSpy()
                    sut.presenter = mediaTypeSelectorPresentationLogicSpy
                    sut.mediaTypes = ["Album","Artist","Book","Movie","Music Video","Podcast","Song"]
                    sut.updateWithSelectedMedia(request: MediaTypeSelector.MediaType.Request(mediaTypes: sut.mediaTypes))
                }
                it("should call presentSearchCriteriaCalled") {
                    expect(mediaTypeSelectorPresentationLogicSpy.presentUpdatedMediaTypesCalled).to(beTrue())
                }
            }
            
            context("when displaySearchCriteria is called on interactor") {
                beforeEach {
                    setupLaunchesInteractor()
                    mediaTypeSelectorPresentationLogicSpy = MediaTypeSelectorPresentationLogicSpy()
                    sut.presenter = mediaTypeSelectorPresentationLogicSpy
                    sut.mediaTypes = ["Album","Artist","Book","Movie","Music Video","Podcast","Song"]
                    sut.displaySearchCriteria(request: MediaTypeSelector.MediaType.Request(mediaTypes: sut.mediaTypes))
                }
                it("should call presentSearchCriteriaCalled") {
                    expect(mediaTypeSelectorPresentationLogicSpy.presentSearchCriteriaCalled).to(beTrue())
                }
            }
        }
    }
}
