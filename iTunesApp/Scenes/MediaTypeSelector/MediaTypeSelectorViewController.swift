//
//  MediaTypeSelectorViewController.swift
//  iTunesApp
//
//  Created by Vineet Sansare on 17/12/2021.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol MediaTypeSelectorDisplayLogic: AnyObject {
    func displaySelectedMediaTypes(viewModel: MediaTypeSelector.MediaType.ViewModel)
    func updateUserSelectedMediaTypes(viewModel: MediaTypeSelector.MediaType.ViewModel)
}

class MediaTypeSelectorViewController: BaseViewController, MediaTypeSelectorDisplayLogic {
    var interactor: MediaTypeSelectorBusinessLogic?
    var router: (NSObjectProtocol & MediaTypeSelectorRoutingLogic & MediaTypeSelectorDataPassing)?
        
    private var allMediaTypes: [String] = ["Album","Artist","Book","Movie","Music Video","Podcast","Song"]
    private var selectedMediaTypes: [String] = []
    @IBOutlet private (set) weak var mediaTypeSelectorTableView: UITableView?
    @IBOutlet private (set) weak var doneBarButton: UIBarButtonItem?
    
    // MARK: Object lifecycle
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    private func setup() {
        let viewController = self
        let interactor = MediaTypeSelectorInteractor()
        let presenter = MediaTypeSelectorPresenter()
        let router = MediaTypeSelectorRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()
        configureUI()
        informInteractor()
    }
    
    // MARK: Do something
    func informInteractor() {
        let request = MediaTypeSelector.MediaType.Request(mediaTypes: router?.dataStore?.mediaTypes ?? [])
        interactor?.updateWithSelectedMedia(request: request)
    }
    
    func displaySelectedMediaTypes(viewModel: MediaTypeSelector.MediaType.ViewModel) {
        print("viewModel - \(viewModel.mediaTypes)")
        selectedMediaTypes.removeAll()
        selectedMediaTypes = viewModel.mediaTypes
        mediaTypeSelectorTableView?.reloadData()
    }
    
    func updateUserSelectedMediaTypes(viewModel: MediaTypeSelector.MediaType.ViewModel) {
        router?.routeToSearchCriteria(userSelectedMediaTypes: viewModel.mediaTypes)
    }
    
    /// Configure UI
    private func configureUI() {
        mediaTypeSelectorTableView?.tableFooterView = UIView()
    }
    
    @IBAction func doneBarButtonTapped(_ sender: UIBarButtonItem) {
        interactor?.displaySearchCriteria(request: MediaTypeSelector.MediaType.Request(mediaTypes: selectedMediaTypes))
    }
}

extension MediaTypeSelectorViewController: UITableViewDataSource, UITableViewDelegate {
    
    //MARK: TableView DataSource Methods
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return allMediaTypes.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {        
        var cell: UITableViewCell
        if let tableCell = tableView.dequeueReusableCell(withIdentifier: CoreConstants.CellIdentifiers.mediaTypeCell) {
            cell = tableCell
        } else {
            cell = UITableViewCell(style: .default, reuseIdentifier: CoreConstants.CellIdentifiers.mediaTypeCell)
        }
        let mediaType = allMediaTypes[indexPath.row]
        cell.textLabel?.text = mediaType
        cell.textLabel?.textColor = .white
        cell.accessoryType = selectedMediaTypes.contains(allMediaTypes[indexPath.row]) ? .checkmark : .none
        return cell
    }
    
    //MARK: TableView DataSource Methods
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        let selectedMediaType = allMediaTypes[indexPath.row]
        
        router?.dataStore?.mediaTypes.append(selectedMediaType) //TODO: Should append unique values only
        selectedMediaTypes.append(selectedMediaType)
    }
    
//    func tableView(_ tableView: UITableView, didDeselectRowAt indexPath: IndexPath) {
//        router?.dataStore?.mediaTypes.remove(at: indexPath.row)
//        selectedMediaTypes.remove(at: indexPath.row)
//    }
}
