//
//  SearchCriteriaInteractor.swift
//  iTunesApp
//
//  Created by Vineet Sansare on 17/12/2021.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol SearchCriteriaBusinessLogic {
    func searchItunes(request: SearchCriteria.Entity.Request)
    func informMediaTypeSelector(request: SearchCriteria.Entity.Request)
}

protocol SearchCriteriaDataStore {
    var mediaTypes: [String] { get set } //TODO: Remove if the passing from MediaTypeSelector doesn't work
    
    var mediaObjects: [[MediaResponseModel]] { get }
}

class SearchCriteriaInteractor: SearchCriteriaBusinessLogic, SearchCriteriaDataStore {
    var mediaTypes: [String] = []
    
    var mediaObjects: [[MediaResponseModel]] = []
    var presenter: SearchCriteriaPresentationLogic?
    var worker: SearchCriteriaWorker?
    var mediaService: MediaServiceProtocol?
    
    init(mediaService: MediaServiceProtocol = MediaService.init()) {
        self.mediaService = mediaService
    }
    
    //TODO: This should be done is a separate WORKER class
    func searchItunes(request: SearchCriteria.Entity.Request) {
        guard let query = request.term else {
            presenter?.presentError(message: UIStrings.emptySearchErrorMessage)
            return
        }
        
        let trimmedQuery = query.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines)
        if trimmedQuery.isEmpty {
            presenter?.presentError(message: UIStrings.emptySearchErrorMessage)
            return
        }
        
        guard let entities = request.entities, !entities.isEmpty else {
            presenter?.presentError(message: "Please select atleast one category")
            return
        }
        
        mediaObjects.removeAll()
        mediaTypes.removeAll()
        
        let group = DispatchGroup()
        for item in entities {
            let trimmedItem = item.trimmingCharacters(in: .whitespacesAndNewlines)
            guard let mediaType = MediaType(rawValue: trimmedItem) else {
                group.leave()
                break
            }
            group.enter()
            mediaService?.searchMovie(term: query, entity: mediaType.key, success: { [weak self] (response) in
                                        guard let media = response.results else {
                                            group.leave()
                                            return
                                        }
                                        self?.mediaObjects.append(media)
                                        self?.mediaTypes.append(trimmedItem)
                                        group.leave()
                                      }, failure: { (_, _) in
                                        group.leave()
                                      })
        }
        
        group.notify(queue: DispatchQueue.main) {
            self.mediaObjects.isEmpty
                ? self.presenter?.presentError(message: "Something's wrong")
                : self.presenter?.presentResultScreenWith(response: SearchCriteria.Entity.Response.init(media: self.mediaObjects, types: self.mediaTypes))
        }
    }
    
    func informMediaTypeSelector(request: SearchCriteria.Entity.Request) {
        presenter?.presentMediaTypeSelector(response: SearchCriteria.SelectedEntity.Response(types: mediaTypes))
    }
}
