//
//  SearchCriteriaViewController.swift
//  iTunesApp
//
//  Created by Vineet Sansare on 17/12/2021.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol SearchCriteriaDisplayLogic: AnyObject {
    func showResultScreenWith(viewModel: SearchCriteria.Entity.ViewModel)
    func showError(message: String)
    
    func showMediaTypeSelectorWith(viewModel: SearchCriteria.SelectedEntity.ViewModel)
}

class SearchCriteriaViewController: BaseViewController {
    var interactor: SearchCriteriaBusinessLogic?
    var router: (NSObjectProtocol & SearchCriteriaRoutingLogic & SearchCriteriaDataPassing)?
    var entities = ["Album","Artist","Book","Movie","Music Video","Podcast","Song"]
    
    @IBOutlet private (set) weak var searcTermTextField: UITextField?
    @IBOutlet private (set) weak var submitButton: UIButton?
    @IBOutlet private (set) weak var mediaTypeView: UIView?
    
    // MARK: Object lifecycle
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    private func setup() {
        let viewController = self
        let interactor = SearchCriteriaInteractor()
        let presenter = SearchCriteriaPresenter()
        let router = SearchCriteriaRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }

    //MARK: View lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()
        configureUI()
    }
    
    ///ConfigureUI
    private func configureUI() {
        submitButton?.layer.cornerRadius = 22
        mediaTypeView?.layer.cornerRadius = 10
        searcTermTextField?.delegate = self
    }
}

//MARK - IBActions
extension SearchCriteriaViewController {
    @IBAction func submitButtonTapped(_ sender: UIButton) {        
        showLoader()
        //TODO: Need to pass user selected Entities from MediaTypeSelector NOT hardcoded ðŸ˜ž
        interactor?.searchItunes(request: SearchCriteria.Entity.Request(term: searcTermTextField?.text,
                                                                        entities: entities))
    }
    
    @IBAction func mediaTypeViewTapped(_ gesture: UITapGestureRecognizer) {        
//        router?.routeToMediaTypeSelector()
        interactor?.informMediaTypeSelector(request: SearchCriteria.Entity.Request(term: searcTermTextField?.text,
                                                                                   entities: entities))
    }
}

//MARK - SearchCriteriaDisplayLogic
extension SearchCriteriaViewController: SearchCriteriaDisplayLogic {
    func showMediaTypeSelectorWith(viewModel: SearchCriteria.SelectedEntity.ViewModel) {
        router?.routeToMediaTypeSelector()
    }
    
    func showResultScreenWith(viewModel: SearchCriteria.Entity.ViewModel) {
        hideLoader()
        router?.routeToSearchResults()
    }

    func showError(message: String) {
        hideLoader()
        showAlert(message: message)
    }
}

extension SearchCriteriaViewController: UITextFieldDelegate {
    func textFieldShouldReturn(_ textField: UITextField) -> Bool {
        return textField.endEditing(false)
    }
}
